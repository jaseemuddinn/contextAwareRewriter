// Main rewriter component that orchestrates the text rewriting interface
'use client';

import { useState } from 'react';
import { useSession } from 'next-auth/react';
import { useApp } from '../context/AppContext';
import aiService from '../services/aiService';
import TextInput from './TextInput';
import TextOutput from './TextOutput';
import ModeSelector from './ModeSelector';
import ContextPanel from './ContextPanel';

export default function TextRewriter() {
    const { state, actions } = useApp();
    const { data: session } = useSession();
    const [rewriteResponse, setRewriteResponse] = useState(null);
    const [loadingMessage, setLoadingMessage] = useState('');
    const [loadingProgress, setLoadingProgress] = useState(0);

    const {
        currentText,
        rewrittenText,
        selectedMode,
        context,
        isLoading,
        error,
        preferences
    } = state;

    const handleRewrite = async () => {
        if (!currentText.trim()) {
            actions.setError('Please enter some text to rewrite');
            return;
        }

        try {
            actions.setLoading(true);
            actions.setError(null);
            setLoadingProgress(0);
            setLoadingMessage('Preparing your text...');

            // Initialize AI service with current preferences
            aiService.initialize(preferences.aiConfig);

            setLoadingProgress(20);
            setLoadingMessage('Analyzing content...');

            const request = {
                text: currentText,
                mode: selectedMode,
                context: context,
                preserveStructure: false
            };

            setLoadingProgress(40);
            setLoadingMessage('Connecting to AI service...');

            const response = await aiService.rewriteText(request);

            setLoadingProgress(80);
            setLoadingMessage('Processing results...');

            actions.setRewrittenText(response.rewrittenText);
            setRewriteResponse(response);

            // Add to local history
            actions.addToHistory({
                originalText: currentText,
                rewrittenText: response.rewrittenText,
                mode: selectedMode,
                context: context
            });

            setLoadingProgress(90);
            setLoadingMessage('Saving to history...');

            // Save to database if user is authenticated
            if (session) {
                try {
                    await fetch('/api/history', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            originalText: currentText,
                            rewrittenText: response.rewrittenText,
                            mode: selectedMode,
                            context: context,
                            metadata: {
                                wordCount: {
                                    original: currentText.split(/\s+/).length,
                                    rewritten: response.rewrittenText.split(/\s+/).length
                                },
                                confidence: response.confidence,
                                processingTime: response.processingTime,
                                source: response.source
                            }
                        }),
                    });
                } catch (error) {
                    console.error('Failed to save to database:', error);
                    // Don't show error to user as this is not critical
                }
            }

        } catch (error) {
            console.error('Rewrite error:', error);
            actions.setError('Failed to rewrite text. Please try again.');
        } finally {
            setLoadingProgress(100);
            setLoadingMessage('Complete!');
            actions.setLoading(false);
            // Reset loading states after a brief delay
            setTimeout(() => {
                setLoadingProgress(0);
                setLoadingMessage('');
            }, 500);
        }
    };

    const handleClearAll = () => {
        actions.setCurrentText('');
        actions.setRewrittenText('');
        setRewriteResponse(null);
        actions.setError(null);
    };

    const canRewrite = currentText.trim().length > 0 && !isLoading;
    const hasApiKey = preferences.aiConfig?.apiKey && preferences.aiConfig.apiKey.trim() !== '';

    return (
        <div className="min-h-screen bg-gradient-to-br from-[var(--gradient-start)] via-[var(--gradient-middle)] to-[var(--gradient-end)]">
            {/* Modern Hero Section */}
            <div className="relative py-12 px-6">
                <div className="absolute inset-0 bg-gradient-to-r from-blue-600/10 to-purple-600/10 backdrop-blur-sm"></div>
                <div className="relative max-w-4xl mx-auto text-center">
                    <div className="inline-block mb-4">
                        <div className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent text-lg font-semibold">
                            AI-Powered
                        </div>
                    </div>
                    <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent mb-4">
                        Context-Aware Text Rewriter
                    </h1>
                    <p className="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
                        Transform your text with intelligent AI-powered rewriting tools that understand context and meaning
                    </p>
                </div>
            </div>

            {/* Main Content Container */}
            <div className="max-w-7xl mx-auto px-6 pb-12 space-y-6">
            {/* API Key Warning */}
            {!hasApiKey && (
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
                    <div className="flex items-center gap-2">
                        <svg className="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                        <div>
                            <span className="text-yellow-800 dark:text-yellow-200 text-sm font-medium">
                                Akash Chat API Key Required
                            </span>
                            <p className="text-yellow-700 dark:text-yellow-300 text-sm mt-1">
                                Please configure your Akash Chat API key in{' '}
                                <a href="/settings" className="underline hover:no-underline">Settings</a> to use the text rewriter.
                            </p>
                        </div>
                    </div>
                </div>
            )}

            {/* Error display */}
            {error && (
                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                    <div className="flex items-center gap-2">
                        <svg className="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span className="text-red-800 dark:text-red-200 text-sm">{error}</span>
                    </div>
                </div>
            )}

            {/* Loading Overlay */}
            {isLoading && (
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
                    <div className="flex flex-col items-center justify-center gap-4">
                        <div className="flex items-center gap-3">
                            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                            <span className="text-blue-800 dark:text-blue-200 font-medium">
                                {loadingMessage || 'Processing your text...'}
                            </span>
                        </div>
                        {loadingProgress > 0 && (
                            <div className="w-full max-w-md">
                                <div className="flex justify-between text-xs text-blue-600 dark:text-blue-400 mb-1">
                                    <span>Progress</span>
                                    <span>{loadingProgress}%</span>
                                </div>
                                <div className="w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2">
                                    <div 
                                        className="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out"
                                        style={{ width: `${loadingProgress}%` }}
                                    ></div>
                                </div>
                            </div>
                        )}
                        <p className="text-blue-600 dark:text-blue-400 text-sm text-center">
                            AI is analyzing and rewriting your text. This may take a few seconds...
                        </p>
                    </div>
                </div>
            )}

            {/* Main interface */}
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                {/* Left sidebar - Controls */}
                <div className="lg:col-span-1 space-y-6">
                    {/* Mode Selector */}
                    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                        <ModeSelector
                            selectedMode={selectedMode}
                            onModeChange={actions.setSelectedMode}
                            disabled={isLoading}
                        />
                    </div>

                    {/* Context Panel */}
                    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                        <ContextPanel
                            context={context}
                            onContextChange={actions.setContext}
                            disabled={isLoading}
                        />
                    </div>

                    {/* Action buttons */}
                    <div className="space-y-3">
                        <button
                            onClick={handleRewrite}
                            disabled={!canRewrite || !hasApiKey}
                            className={`
                w-full py-3 px-4 rounded-lg font-medium text-sm transition-all duration-200
                ${canRewrite && hasApiKey
                                    ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg'
                                    : 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                                }
              `}
                        >
                            {isLoading ? (
                                <div className="flex flex-col items-center justify-center gap-2">
                                    <div className="flex items-center gap-2">
                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                        <span className="text-sm">{loadingMessage}</span>
                                    </div>
                                    {loadingProgress > 0 && (
                                        <div className="w-full bg-blue-400 rounded-full h-1.5">
                                            <div 
                                                className="bg-white h-1.5 rounded-full transition-all duration-300"
                                                style={{ width: `${loadingProgress}%` }}
                                            ></div>
                                        </div>
                                    )}
                                </div>
                            ) : !hasApiKey ? (
                                '🔑 API Key Required'
                            ) : (
                                '✨ Rewrite Text'
                            )}
                        </button>                        <button
                            onClick={handleClearAll}
                            disabled={isLoading}
                            className="w-full py-2 px-4 rounded-lg border border-gray-300 dark:border-gray-600 
                       text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 
                       transition-colors duration-200 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            🗑️ Clear All
                        </button>
                    </div>

                    {/* AI Service Status */}
                    <div className="bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-3">
                        <div className="text-xs text-gray-600 dark:text-gray-400 font-medium mb-1">
                            AI Service Status
                        </div>
                        <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${aiService.isReady() ? 'bg-green-500' : 'bg-yellow-500'}`}></div>
                            <span className="text-xs text-gray-500 dark:text-gray-500">
                                {aiService.useDummyData ? 'Demo Mode (Dummy Data)' : 'AkashChat API Ready'}
                            </span>
                        </div>
                    </div>
                </div>

                {/* Right side - Text areas */}
                <div className="lg:col-span-3 space-y-6">
                    {/* Input area */}
                    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                        <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                            Original Text
                        </h2>
                        <TextInput
                            value={currentText}
                            onChange={actions.setCurrentText}
                            placeholder="Enter the text you want to rewrite here..."
                            disabled={isLoading}
                            minHeight="200px"
                        />
                    </div>

                    {/* Output area */}
                    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                        <TextOutput
                            originalText={currentText}
                            rewrittenText={rewrittenText}
                            isLoading={isLoading}
                            changes={rewriteResponse?.changes || []}
                            showComparison={currentText && rewrittenText}
                        />
                    </div>

                    {/* Response metadata */}
                    {rewriteResponse && !isLoading && (
                        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                                <div>
                                    <div className="text-xs text-gray-500 dark:text-gray-400">Confidence</div>
                                    <div className="text-lg font-medium text-gray-900 dark:text-gray-100">
                                        {Math.round(rewriteResponse.confidence * 100)}%
                                    </div>
                                </div>
                                <div>
                                    <div className="text-xs text-gray-500 dark:text-gray-400">Changes</div>
                                    <div className="text-lg font-medium text-gray-900 dark:text-gray-100">
                                        {rewriteResponse.changes.length}
                                    </div>
                                </div>
                                <div>
                                    <div className="text-xs text-gray-500 dark:text-gray-400">Mode</div>
                                    <div className="text-lg font-medium text-gray-900 dark:text-gray-100 capitalize">
                                        {rewriteResponse.mode}
                                    </div>
                                </div>
                                <div>
                                    <div className="text-xs text-gray-500 dark:text-gray-400">Time</div>
                                    <div className="text-lg font-medium text-gray-900 dark:text-gray-100">
                                        {(rewriteResponse.processingTime / 1000).toFixed(1)}s
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}